// Licence file C:\Users\oleg\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using Domain.Model;
using Microsoft.EntityFrameworkCore.Migrations;

namespace DataAccess.Model
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<Comment> Comments { get; set; } // Comments
        DbSet<Good> Goods { get; set; } // Goods
        DbSet<GoodsList> GoodsLists { get; set; } // GoodsList
        DbSet<LikedList> LikedLists { get; set; } // LikedList
        DbSet<SavedAdress> SavedAdresses { get; set; } // SavedAdresses
        DbSet<Ship> Ships { get; set; } // Ships
        DbSet<User> Users { get; set; } // Users

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }


        public DbSet<Comment> Comments { get; set; } // Comments
        public DbSet<Good> Goods { get; set; } // Goods
        public DbSet<GoodsList> GoodsLists { get; set; } // GoodsList
        public DbSet<LikedList> LikedLists { get; set; } // LikedList
        public DbSet<SavedAdress> SavedAdresses { get; set; } // SavedAdresses
        public DbSet<Ship> Ships { get; set; } // Ships
        public DbSet<User> Users { get; set; } // Users

        //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        //{
        //    if (!optionsBuilder.IsConfigured)
        //    {
        //        optionsBuilder.UseSqlServer(@"Data Source=Daun;Initial Catalog=ЛарионовДота;Integrated Security=True;MultipleActiveResultSets=True;Encrypt=false;TrustServerCertificate=true");
        //    }
        //}

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new CommentConfiguration());
            modelBuilder.ApplyConfiguration(new GoodConfiguration());
            modelBuilder.ApplyConfiguration(new GoodsListConfiguration());
            modelBuilder.ApplyConfiguration(new LikedListConfiguration());
            modelBuilder.ApplyConfiguration(new SavedAdressConfiguration());
            modelBuilder.ApplyConfiguration(new ShipConfiguration());
            modelBuilder.ApplyConfiguration(new UserConfiguration());
        }

    }

    #endregion


    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // Comments
    public class CommentConfiguration : IEntityTypeConfiguration<Comment>
    {
        public void Configure(EntityTypeBuilder<Comment> builder)
        {
            builder.ToTable("Comments", "dbo");
            builder.HasKey(x => new { x.UserId, x.GoodId }).HasName("PK__Comments__D7CB621F4C519DAB").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.GoodId).HasColumnName(@"GoodId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Rate).HasColumnName(@"Rate").HasColumnType("int").IsRequired();
            builder.Property(x => x.Comment_).HasColumnName(@"Comment").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Good).WithMany(b => b.Comments).HasForeignKey(c => c.GoodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Comments__GoodId__46E78A0C");
            builder.HasOne(a => a.User).WithMany(b => b.Comments).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Comments__UserId__45F365D3");
        }
    }

    // Goods
    public class GoodConfiguration : IEntityTypeConfiguration<Good>
    {
        public void Configure(EntityTypeBuilder<Good> builder)
        {
            builder.ToTable("Goods", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Goods__3214EC2747D3C508").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);
            builder.Property(x => x.Price).HasColumnName(@"Price").HasColumnType("decimal(20,2)").HasPrecision(20, 2).IsRequired();
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("int").IsRequired();
            builder.Property(x => x.Descryption).HasColumnName(@"Descryption").HasColumnType("nvarchar(max)").IsRequired();
        }
    }

    // GoodsList
    public class GoodsListConfiguration : IEntityTypeConfiguration<GoodsList>
    {
        public void Configure(EntityTypeBuilder<GoodsList> builder)
        {
            builder.ToTable("GoodsList", "dbo");
            builder.HasKey(x => new { x.UserId, x.GoodId }).HasName("PK__GoodsLis__D7CB621F7A6EF2A9").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.GoodId).HasColumnName(@"GoodId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Good).WithMany(b => b.GoodsLists).HasForeignKey(c => c.GoodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__GoodsList__GoodI__3F466844");
            builder.HasOne(a => a.User).WithMany(b => b.GoodsLists).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__GoodsList__UserI__3E52440B");
        }
    }

    // LikedList
    public class LikedListConfiguration : IEntityTypeConfiguration<LikedList>
    {
        public void Configure(EntityTypeBuilder<LikedList> builder)
        {
            builder.ToTable("LikedList", "dbo");
            builder.HasKey(x => new { x.UserId, x.GoodId }).HasName("PK__LikedLis__D7CB621F263FEB94").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.GoodId).HasColumnName(@"GoodId").HasColumnType("int").IsRequired().ValueGeneratedNever();

            // Foreign keys
            builder.HasOne(a => a.Good).WithMany(b => b.LikedLists).HasForeignKey(c => c.GoodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__LikedList__GoodI__4316F928");
            builder.HasOne(a => a.User).WithMany(b => b.LikedLists).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__LikedList__UserI__4222D4EF");
        }
    }

    // SavedAdresses
    public class SavedAdressConfiguration : IEntityTypeConfiguration<SavedAdress>
    {
        public void Configure(EntityTypeBuilder<SavedAdress> builder)
        {
            builder.ToTable("SavedAdresses", "dbo");
            builder.HasKey(x => new { x.UserId, x.Title }).HasName("PK__SavedAdr__D543AA01C2B1B66D").IsClustered();

            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20).ValueGeneratedNever();
            builder.Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Street).HasColumnName(@"Street").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.House).HasColumnName(@"House").HasColumnType("int").IsRequired();
            builder.Property(x => x.Building).HasColumnName(@"Building").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Front).HasColumnName(@"Front").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Apartament).HasColumnName(@"Apartament").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.User).WithMany(b => b.SavedAdresses).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__SavedAdre__UserI__398D8EEE");
        }
    }

    // Ships
    public class ShipConfiguration : IEntityTypeConfiguration<Ship>
    {
        public void Configure(EntityTypeBuilder<Ship> builder)
        {
            builder.ToTable("Ships", "dbo");
            builder.HasKey(x => new { x.Id, x.UserId, x.GoodId }).HasName("PK__Ships__DF685A06ADC55F86").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.GoodId).HasColumnName(@"GoodId").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.ShipDate).HasColumnName(@"ShipDate").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.Status).HasColumnName(@"Status").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);

            // Foreign keys
            builder.HasOne(a => a.Good).WithMany(b => b.Ships).HasForeignKey(c => c.GoodId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Ships__GoodId__4AB81AF0");
            builder.HasOne(a => a.User).WithMany(b => b.Ships).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Ships__UserId__49C3F6B7");
        }
    }

    // Users
    public class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.ToTable("Users", "dbo");
            builder.HasKey(x => x.Id).HasName("PK__Users__3214EC27EF4AD3F1").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.Nickname).HasColumnName(@"Nickname").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Surname).HasColumnName(@"Surname").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("nvarchar(20)").IsRequired().HasMaxLength(20);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Phonenumber).HasColumnName(@"Phonenumber").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Authed).HasColumnName(@"Authed").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsAdmin).HasColumnName(@"IsAdmin").HasColumnType("bit").IsRequired();
            builder.Property(x => x.IsDelete).HasColumnName(@"IsDelete").HasColumnType("bit").IsRequired();
        }
    }


    #endregion

}
// </auto-generated>
